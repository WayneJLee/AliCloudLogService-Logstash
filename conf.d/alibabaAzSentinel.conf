input {
	tcp {
	    port => 28866
	    type => 'syslog_tls'
	    ssl_certificate_authorities => '{ CA_PATH }'
	    ssl_cert => '{ CERT_PATH }'
	    ssl_key => '{ KEY_PATH }'
	    ssl_enable => true
	    ssl_verify => true
	}
}

filter {
	if "actiontrail" in [message] {
                dissect {
                        mapping => {
                                "message" => "%{syslogid} %{time} %{domain} - - - ||%{topic}||%{source}||%{tag}||event=%{event}"
                        }
                }
                json {
                        source => "event"
                }
		mutate {
                	rename => { "eventTime" => "time" }
        	}	
		date {
                        match => [ "time", "yyyy-MM-dd'T'HH:mm:ssZ" ]
                }
		geoip {
			source => "sourceIpAddress"
		}
        } else {
		grok {
			match => { 
			
				"message" => [
					# Log_Service
					"%{GREEDYDATA:Header} \|\|__topic__=%{DATA:Topic}\|\|__source__=%{DATA:Source}\|\|client_ip=%{DATA:ClientIP}\|\|time=%{TIMESTAMP_ISO8601:Time}\|\|request_method=%{DATA:RequestMethod}\|\|scheme=%{DATA:Scheme}\|\|http_host=%{DATA:HttpHost}\|\|request_uri=%{DATA:RequestUri}\|\|request_length=%{DATA:RequestLength}\|\|server_protocol=%{DATA:ServerProtocol}\|\|body_bytes_sent=%{INT:BodyBytesSent}\|\|http_referer=%{DATA:HttpReferer}\|\|http_user_agent=%{DATA:HttpUserAgent}\|\|http_x_real_ip=%{DATA:Http_X_Real_IP}\|\|http_x_forwarded_for=%{DATA:Http_X_Forwarded_For}\|\|status=%{INT:Status}\|\|request_time=%{DATA:RequestTime}\|\|upstream_addr=%{DATA:UpstreamAddr}\|\|upstream_response_time=%{DATA:UpstreamResponseTime}\|\|upstream_status=%{DATA:UpstreamStatus}\|\|host=%{DATA:Host}\|\|slbid=%{DATA:Slbid}\|\|vip_addr=%{DATA:VipAddr}\|\|slb_vport=%{DATA:SlbVport}\|\|ssl_cipher=%{DATA:SslCipher}\|\|ssl_protocol=%{DATA:SslProtocol}\|\|read_request_time=%{DATA:ReadRequestTime}\|\|write_response_time=%{DATA:WriteResponseTime}\|\|tcpinfo_rtt=%{DATA:TcpInfoRtt}\|\|client_port=%{DATA:ClientPort}", 
					# CodeSecurity
					"%{GREEDYDATA:Header} \|\|__topic__=%{DATA:Topic}\|\|__source__=%{DATA:Source}\|\|__tag__:__hostname__=%{DATA:Tag_Hostname}\|\|__tag__:__path__=%{DATA:Tag_Path}\|\|__tag__:__pack_id__=%{DATA:Tag_PackID}\|\|__tag__:__client_ip__=%{DATA:Tag_ClientIP}\|\|__tag__:__receive_time__=%{DATA:Tag_Path}\|\|__raw_log__=%{SYSLOGBASE:RawLog} %{GREEDYDATA:SyslogMessage}",
					# SecondarySYSLOG
					"%{SYSLOGBASE: SyslogBase} %{GREEDYDATA:SyslogMessage}",
				
					# WAF - With HTTP_Cookie
					"%{GREEDYDATA:Header} \|\|__topic__=%{DATA:Topic}\|\|__source__=%{DATA:Source}\|\|https=%{DATA:Https}\|\|request_length=%{DATA:RequestLength}\|\|user_id=%{DATA:UserID}\|\|http_referer=%{DATA:HttpReferer}\|\|status=%{DATA:Status}\|\|upstream_addr=%{DATA:UpstreamAddr}\|\|acl_action=%{DATA:AclAction}\|\|http_user_agent=%{DATA:HttpUserAgent}\|\|upstream_status=%{DATA:UpstreamStatus}\|\|remote_port=%{DATA:RemotePort}\|\|request_path=%{DATA:RequestPath}\|\|upstream_response_time=%{DATA:UpstreamResponseTime}\|\|body_bytes_sent=%{DATA:BodyBytesSent}\|\|matched_host=%{DATA:MatchedHost}\|\|host=%{HOSTNAME:Host}\|\|http_cookie=%{GREEDYDATA:HttpCookie}\|\|block_action=%{DATA:BlockAction}\|\|request_traceid=%{DATA:RequestTraceID}\|\|ua_device_type=%{DATA:UaDeviceType}\|\|request_time_msec=%{DATA:RequestTimeMsec}\|\|real_client_ip=%{DATA:RealClientIP}\|\|region=%{DATA:Region}\|\|server_protocol=%{DATA:ServerProtocol}\|\|request_method=%{DATA:RequestMethod}\|\|content_type=%{DATA:ContentType}\|\|ua_os_family=%{DATA:UaOSFamily}\|\|upstream_ip=%{DATA:UpstreamIP}\|\|remote_addr=%{DATA:RemoteAddr}\|\|http_x_forwarded_for=%{DATA:Http_X_Forwarded_For}\|\|time=%{TIMESTAMP_ISO8601:_Time}",
				
					# WAF - with UA
					"%{GREEDYDATA:Header} \|\|__topic__=%{DATA:Topic}\|\|__source__=%{DATA:Source}\|\|https=%{DATA:Https}\|\|request_length=%{DATA:RequestLength}\|\|user_id=%{DATA:UserID}\|\|http_referer=%{DATA:HttpReferer}\|\|status=%{DATA:Status}\|\|upstream_addr=%{DATA:UpstreamAddr}\|\|acl_action=%{DATA:AclAction}\|\|http_user_agent=%{DATA:HttpUserAgent}\|\|upstream_status=%{DATA:UpstreamStatus}\|\|remote_port=%{DATA:RemotePort}\|\|request_path=%{DATA:RequestPath}\|\|upstream_response_time=%{DATA:UpstreamResponseTime}\|\|body_bytes_sent=%{DATA:BodyBytesSent}\|\|matched_host=%{DATA:MatchedHost}\|\|host=%{HOSTNAME:host}\|\|block_action=%{DATA:BlockAction}\|\|request_traceid=%{DATA:RequestTraceID}\|\|ua_device_type=%{DATA:UaDeviceType}\|\|request_time_msec=%{DATA:RequestTimeMsec}\|\|real_client_ip=%{DATA:RealClientIP}\|\|region=%{DATA:Region}\|\|server_protocol=%{DATA:ServerProtocol}\|\|request_method=%{DATA:RequestMethod}\|\|content_type=%{DATA:ContentType}\|\|ua_os_family=%{DATA:UaOSFamily}\|\|upstream_ip=%{DATA:UpstreamIP}\|\|remote_addr=%{DATA:RemoteAddr}\|\|http_x_forwarded_for=%{DATA:Http_X_Forwarded_For}\|\|time=%{TIMESTAMP_ISO8601:_Time}",

					# WAF - without UA
					"%{GREEDYDATA:Header} \|\|__topic__=%{DATA:Topic}\|\|__source__=%{DATA:Source}\|\|https=%{DATA:Https}\|\|request_length=%{DATA:RequestLength}\|\|user_id=%{DATA:UserID}\|\|http_referer=%{DATA:HttpReferer}\|\|status=%{DATA:Status}\|\|upstream_addr=%{DATA:UpstreamAddr}\|\|acl_action=%{DATA:AclAction}\|\|http_user_agent=%{DATA:HttpUserAgent}\|\|upstream_status=%{DATA:UpstreamStatus}\|\|remote_port=%{DATA:RemotePort}\|\|request_path=%{DATA:RequestPath}\|\|upstream_response_time=%{DATA:UpstreamResponseTime}\|\|body_bytes_sent=%{DATA:BodyBytesSent}\|\|matched_host=%{DATA:MatchedHost}\|\|host=%{HOSTNAME:host}\|\|block_action=%{DATA:BlockAction}\|\|request_traceid=%{DATA:RequestTraceID}\|\|request_time_msec=%{DATA:RequestTimeMsec}\|\|real_client_ip=%{DATA:RealClientIP}\|\|region=%{DATA:Region}\|\|server_protocol=%{DATA:ServerProtocol}\|\|request_method=%{DATA:RequestMethod}\|\|content_type=%{DATA:ContentType}\|\|upstream_ip=%{DATA:UpstreamIP}\|\|remote_addr=%{DATA:RemoteAddr}\|\|http_x_forwarded_for=%{DATA:Http_X_Forwarded_For}\|\|time=%{TIMESTAMP_ISO8601:_Time}"
				]
			}
		
		}
		date {
			match => [ "TimeGenerated", "dd/MMM/yyyy:HH:mm:ss Z" ]
		}
	}
}

output {
    azure_loganalytics {
        customer_id => "{ CUSTOMER_ID }"
        shared_key => "{ WORKSPACE_KEY }"
        log_type => "{ LOG_TYPE }"
	time_generated_field => "Time"
    }
    
    stdout { codec => rubydebug }
}
